import logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
# 1. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∏–º–ø–æ—Ä—Ç CallbackQueryHandler
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler

BOT_TOKEN = "8493906402:AAGBzNabL-eYzHn7_1flXpncunNUrOEym0I" 

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
FIRST, SECOND, THIRD, FINAL, PAYMENT = range(5) # 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ PAYMENT

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø—Ä–∏–π—Ç–∏ —Ç—É–¥–∞ –≥–¥–µ —Ç–µ–±–µ –ø–æ–º–æ–≥—É—Ç –≤–µ—Ä–Ω—É—Ç—å —Ä–∞–¥–æ—Å—Ç—å –∫ –∂–∏–∑–Ω–∏. –¢—ã –≥–æ—Ç–æ–≤?",
        reply_markup=reply_markup
    )
    return FIRST

async def handle_first_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    user_text = update.message.text
    
    if user_text == '‚úÖ –î–∞':
        keyboard = [['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(
            "–ù—É —á—Ç–æ, –Ω–∞–¥–æ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º. –•–æ—á—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ –æ —Ç–æ–º –∫–∞–∫ –≤–µ—Ä–Ω—É—Ç—å —Ä–∞–¥–æ—Å—Ç—å –∫ –∂–∏–∑–Ω–∏. –¢—ã –≥–æ—Ç–æ–≤?",
            reply_markup=reply_markup
        )
        return SECOND
        
    elif user_text == '‚ùå –ù–µ—Ç':
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ, –∫–∞–∫ —Å–∫–∞–∂–µ—à—å! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start"
        )
        return ConversationHandler.END
        
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá")
        return FIRST

async def handle_second_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    
    if user_text == '‚úÖ –î–∞':
        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        keyboard = [
            [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/+VUZLC9qW_184ZjUy")],
            [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ! –ù–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª.\n\n"
            "–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'",
            reply_markup=reply_markup
        )
        return THIRD
        
    elif user_text == '‚ùå –ù–µ—Ç':
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ, –∫–∞–∫ —Å–∫–∞–∂–µ—à—å! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start"
        )
        return ConversationHandler.END
        
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá")
        return SECOND

async def handle_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "check_subscription":
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (getChatMember)
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è. –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–æ–ª–∏–∫:")
        await query.message.reply_text("https://vkvideo.ru/video-174616704_456239261?list=61718cd62595af03ef")
        
        keyboard = [['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await query.message.reply_text(
            "–¢—ã —Ö–æ—á–µ—à—å —á—Ç–æ–±—ã —è —Å–∫–∏–Ω—É–ª —Ç–µ–±–µ 2 —Ä–æ–ª–∏–∫?",
            reply_markup=reply_markup
        )
        # 2. –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ FINAL, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–µ–æ
        return FINAL

async def handle_final_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–æ—Ç–ø—Ä–∞–≤–∫–∞ 2 –∏ 3 –≤–∏–¥–µ–æ)"""
    user_text = update.message.text
    
    if user_text == '‚úÖ –î–∞':
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –Ø —Ä–∞–¥ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–µ–Ω —ç—Ç–æ—Ç —Ä–æ–ª–∏–∫")
        await update.message.reply_text("–í–æ—Ç –≤—Ç–æ—Ä–æ–π —Ä–æ–ª–∏–∫:")
        await update.message.reply_text("https://vk.com/clip-174616704_456239315?c=1")
        
        await update.message.reply_text("–í–æ—Ç —Ç—Ä–µ—Ç–∏–π —Ä–æ–ª–∏–∫:")
        await update.message.reply_text("https://vkvideo.ru/video-174616704_456239347?list=b0e54bd769e04259d4")
        
        keyboard = [['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(
            "–í–æ—Ç –∏ 3 –≤–∏–¥–µ–æ! –Ø —É–≤–µ—Ä–µ–Ω —á—Ç–æ –æ–Ω–∏ —Ç–µ–±–µ –ø–æ–º–æ–≥–ª–∏. –•–æ—á—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ –∫—É–ø–∏—Ç—å –∑–∞ 99 —Ä—É–±–ª–µ–π 1 –∑–∞–Ω—è—Ç–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç. –¢—ã —Å–æ–≥–ª–∞—Å–µ–Ω?",
            reply_markup=reply_markup
        )
        # 2. –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–∏–∞–ª–æ–≥ –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ PAYMENT –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã
        return PAYMENT
        
    elif user_text == '‚ùå –ù–µ—Ç':
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ, –∫–∞–∫ —Å–∫–∞–∂–µ—à—å! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start"
        )
        return ConversationHandler.END
        
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá")
        return FINAL

# 2. –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ –æ–ø–ª–∞—Ç—É
async def handle_payment_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ –æ–ø–ª–∞—Ç—É (–Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ PAYMENT)"""
    user_text = update.message.text
    
    if user_text == '‚úÖ –î–∞':
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø–ª–∞—Ç–µ —Ç—ã —É–≤–∏–¥–∏—à—å –≤ —ç—Ç–æ–º –±–æ—Ç–µ: @test_bot"
        )
    elif user_text == '‚ùå –ù–µ—Ç':
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ, –∫–∞–∫ —Å–∫–∞–∂–µ—à—å! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start"
        )
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            FIRST: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_first_response)],
            SECOND: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_second_response)],
            THIRD: [CallbackQueryHandler(handle_subscription)],  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
            FINAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_final_response)],
            # 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
            PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_payment_response)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()